{"version":3,"file":"static/js/309.51e261aa.chunk.js","mappings":"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","sources":["components/DeliveryForm/DeliveryForm.styled.jsx","components/DeliveryForm/DeliveryForm.jsx","components/Payment/Payment.jsx","pages/PaymentPage/PaymentPage.jsx","redux/cart/selectors.js"],"sourcesContent":["import { Form } from 'formik';\nimport styled from 'styled-components';\n\nexport const StyledForm = styled(Form)`\n  max-width: 350px;\n  margin: 0 auto;\n  padding: 30px 0;\n`;\n\nexport const StyledFormField = styled.div`\n  margin-bottom: 20px;\n\n  label {\n    display: block;\n    margin-bottom: 5px;\n  }\n\n  input,\n  select {\n    width: 320px;\n    padding: 10px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    font-size: 16px;\n  }\n\n  .error {\n    color: red;\n    font-size: 14px;\n  }\n`;\n\nexport const StyledButton = styled.button`\n  padding: 10px 20px;\n  height: 50px;\n  background-color: var(--main-green-color);\n  color: #fff;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: var(--main-transition);\n\n  &:hover {\n    background-color: var(--main-pink-color);\n  }\n`;\n","import React from 'react';\nimport axios from 'axios';\nimport Notiflix from 'notiflix';\nimport { Formik, Field } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  StyledButton,\n  StyledForm,\n  StyledFormField,\n} from './DeliveryForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectCartProducts } from 'redux/cart/selectors';\nimport { removeAllFromCart } from 'redux/cart/cartProductsSlice';\n// import { loadStripe } from '@stripe/stripe-js';\n\nconst notiflixShowOptions = {\n  width: '340px',\n  titleFontSize: '20px',\n  messageFontSize: '18px',\n  titleColor: '#556b2f',\n  okButtonBackground: '#556b2f',\n};\n\nconst notiflixSuccessOptions = {\n  fontSize: '17px',\n  success: { background: '#e6b8ca', textColor: '#161616' },\n};\n\nconst initialValues = {\n  firstName: '',\n  lastName: '',\n  phoneNumber: '',\n  address: '',\n  deliveryDate: '',\n};\n\nconst validationSchema = Yup.object().shape({\n  firstName: Yup.string().required('Required'),\n  lastName: Yup.string().required('Required'),\n  phoneNumber: Yup.string().required('Required'),\n  address: Yup.string().required('Required'),\n  deliveryDate: Yup.date().required('Required'),\n});\n\nexport const PaymentForm = () => {\n  const orderedBouquets = useSelector(selectCartProducts);\n\n  // const stripePromise = loadStripe(process.env.REACT_APP_PUBLISHABLE_KEY);\n\n  // const handleSubmit = async () => {\n  //   const lineItems = orderedBouquets.map(item => {\n  //     return {\n  //       price_data: {\n  //         currency: 'eur',\n  //         product_data: {\n  //           name: item.name,\n  //         },\n  //         unit_amount: item.price * 100,\n  //       },\n  //       quantity: item.quantity,\n  //     };\n  //   });\n\n  //   const { data } = await axios.post('http://localhost:5000/api/checkout', {\n  //     lineItems,\n  //   });\n\n  //   const stripe = await stripePromise;\n  //   await stripe.redirectToCheckout({ sessionId: data.id });\n  // };\n  const dispatch = useDispatch();\n  const handleSubmit = async values => {\n    const newOrder = {\n      firstName: values.firstName,\n      lastName: values.lastName,\n      phoneNumber: values.phoneNumber,\n      address: values.address,\n      deliveryDate: values.deliveryDate,\n      bouquets: [...orderedBouquets],\n    };\n    try {\n      Notiflix.Confirm.show(\n        'Sending the order',\n        `Send your order?`,\n        'Yes',\n        'No',\n        async function () {\n          const response = await axios.post(\n            'https://floristry-backend.onrender.com/api/orders',\n            newOrder\n          );\n          console.log('Response from server:', response.data);\n          Notiflix.Notify.success(\n            'Your order has been sent successfully! Thank you!',\n            notiflixSuccessOptions\n          );\n          dispatch(removeAllFromCart());\n        },\n        function () {\n          return;\n        },\n        notiflixShowOptions\n      );\n    } catch (error) {\n      console.error('Error:', error.message);\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      {({ errors, touched }) => (\n        <StyledForm>\n          <StyledFormField>\n            <label htmlFor=\"firstName\">First Name</label>\n            <Field name=\"firstName\" />\n            {errors.firstName && touched.firstName && (\n              <div className=\"error\">{errors.firstName}</div>\n            )}\n          </StyledFormField>\n          <StyledFormField>\n            <label htmlFor=\"lastName\">Last Name</label>\n            <Field name=\"lastName\" />\n            {errors.lastName && touched.lastName && (\n              <div className=\"error\">{errors.lastName}</div>\n            )}\n          </StyledFormField>\n          <StyledFormField>\n            <label htmlFor=\"phoneNumber\">Phone Number</label>\n            <Field\n              type=\"tel\"\n              name=\"phoneNumber\"\n              placeholder=\"Enter phone number\"\n            />\n            {errors.phoneNumber && touched.phoneNumber && (\n              <div className=\"error\">{errors.phoneNumber}</div>\n            )}\n          </StyledFormField>\n\n          <StyledFormField>\n            <label htmlFor=\"address\">Address</label>\n            <Field name=\"address\" />\n            {errors.address && touched.address && (\n              <div className=\"error\">{errors.address}</div>\n            )}\n          </StyledFormField>\n          <StyledFormField>\n            <label htmlFor=\"deliveryDate\">Delivery Date</label>\n            <Field type=\"date\" name=\"deliveryDate\" />\n            {errors.deliveryDate && touched.deliveryDate && (\n              <div className=\"error\">{errors.deliveryDate}</div>\n            )}\n          </StyledFormField>\n          <StyledButton type=\"submit\">Continue</StyledButton>\n        </StyledForm>\n      )}\n    </Formik>\n  );\n};\n","import { PaymentForm } from 'components/DeliveryForm/DeliveryForm';\n\nexport const Payment = () => {\n  return (\n    <div>\n      <PaymentForm />\n    </div>\n  );\n};\n","import { Payment } from 'components/Payment/Payment';\n\nexport default function PaymentPage() {\n  return <Payment />;\n}\n","export const selectCartProducts = state => state.cartProducts.products;\n"],"names":["StyledForm","styled","Form","StyledFormField","StyledButton","notiflixShowOptions","width","titleFontSize","messageFontSize","titleColor","okButtonBackground","notiflixSuccessOptions","fontSize","success","background","textColor","initialValues","firstName","lastName","phoneNumber","address","deliveryDate","validationSchema","Yup","shape","required","PaymentForm","orderedBouquets","useSelector","selectCartProducts","dispatch","useDispatch","handleSubmit","values","newOrder","bouquets","Notiflix","axios","response","console","log","data","removeAllFromCart","error","message","onSubmit","errors","touched","htmlFor","name","className","type","placeholder","Payment","PaymentPage","state","cartProducts","products"],"sourceRoot":""}