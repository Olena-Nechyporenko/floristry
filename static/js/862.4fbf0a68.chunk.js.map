{"version":3,"file":"static/js/862.4fbf0a68.chunk.js","mappings":"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","sources":["components/BouquetItem/BouquetItem.styled.jsx","components/BouquetItem/BouquetItem.jsx","components/Catalog/Catalog.styled.jsx","../node_modules/nanoid/url-alphabet/index.js","../node_modules/nanoid/index.browser.js","components/Filters/Filters.styled.jsx","components/Filters/Filters.jsx","components/Catalog/Catalog.jsx","pages/CatalogPage/CatalogPage.jsx","redux/bouquets/selectors.js","redux/cart/selectors.js"],"sourcesContent":["import styled from 'styled-components';\nexport const BouquetWrapper = styled.div`\n  position: relative;\n  border: 1px solid var(--main-pink-color);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  border-radius: 10px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n  padding: 10px;\n\n  @media (min-width: 768px) {\n    flex-basis: calc((100% - 168px) / 2);\n    margin-bottom: 20px;\n  }\n\n  @media (min-width: 1440px) {\n    flex-basis: calc((100% - 240px) / 4);\n    margin-bottom: 20px;\n  }\n`;\nexport const ImgWrapper = styled.div`\n  width: 300px;\n  height: 300px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const StyledImg = styled.img`\n  width: 80%;\n`;\n\nexport const StyledTitle = styled.h2`\n  color: #e6b8ca;\n  text-align: center;\n  font-weight: 500;\n`;\n\nexport const DescrWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport const StyledPrice = styled.p`\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  background-color: #e6b8ca;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  padding: 5px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n  font-size: 16px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n`;\n\nexport const StyledDescription = styled.p`\n  text-align: center;\n`;\nexport const Button = styled.button`\n  background-color: #556b2f;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n  margin-top: 20px;\n  &:hover {\n    background-color: #e6b8ca;\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 3px rgba(25, 118, 210, 0.5);\n  }\n`;\n","import Notiflix from 'notiflix';\nimport { addToCart, increaseQuantity } from 'redux/cart/cartProductsSlice';\nimport {\n  BouquetWrapper,\n  Button,\n  DescrWrapper,\n  ImgWrapper,\n  StyledDescription,\n  StyledImg,\n  StyledPrice,\n  StyledTitle,\n} from './BouquetItem.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectCartProducts } from 'redux/cart/selectors';\n\nconst notiflixSuccessOptions = {\n  fontSize: '17px',\n  success: { background: '#e6b8ca', textColor: '#161616' },\n};\n\nexport const BouquetItem = ({ bouquet }) => {\n  const { url, price, description, name } = bouquet; // Destructure bouquet\n  const dispatch = useDispatch();\n  const cartProducts = useSelector(selectCartProducts);\n\n  const handleAddToCart = () => {\n    const existingProduct = cartProducts.find(item => item._id === bouquet._id);\n    console.log(existingProduct);\n\n    if (existingProduct) {\n      dispatch(\n        increaseQuantity({\n          _id: existingProduct._id,\n          quantity: existingProduct.quantity + 1,\n        })\n      );\n      Notiflix.Notify.success(\n        `You now have ${existingProduct.quantity + 1} ${\n          existingProduct.name\n        } in your cart!`,\n        notiflixSuccessOptions\n      );\n    } else {\n      dispatch(addToCart({ ...bouquet, quantity: 1 }));\n      Notiflix.Notify.success(\n        `${bouquet.name} added to cart successfully`,\n        notiflixSuccessOptions\n      );\n    }\n    // console.log(cartProducts);\n  };\n\n  return (\n    <BouquetWrapper>\n      <ImgWrapper>\n        <StyledImg src={url} alt={name} />{' '}\n      </ImgWrapper>\n      <DescrWrapper>\n        <StyledTitle>{name}</StyledTitle>\n        <StyledPrice>{price} â‚¬</StyledPrice>\n        <StyledDescription>{description}</StyledDescription>\n      </DescrWrapper>\n      <Button onClick={() => handleAddToCart(bouquet)}>Add to cart</Button>\n    </BouquetWrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const CatalogWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 30px;\n  justify-content: center;\n  margin: 0 auto;\n  flex-direction: column;\n\n  @media (min-width: 768px) {\n    flex-direction: row;\n  }\n`;\n\nexport const LoadingText = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  font-size: 20px;\n  font-weight: 400;\n`;\n","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { urlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += urlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","import { Form } from 'formik';\nimport styled from 'styled-components';\n\nexport const FilterWrapper = styled.div`\n  display: flex;\n  padding: 20px;\n  background-color: #f7f7f7;\n  border-radius: 8px;\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\n  flex-wrap: wrap;\n  margin-bottom: 50px;\n  margin-top: 50px;\n`;\nexport const StyledForm = styled(Form)`\n  display: flex;\n  gap: 30px;\n  align-items: center;\n`;\nexport const SubmitButton = styled.button`\n  padding: 10px 20px;\n  height: 50px;\n  background-color: var(--main-green-color);\n  color: #fff;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n\n  &:hover {\n    background-color: var(--main-pink-color);\n  }\n`;\n\nexport const FormGroup = styled.div`\n  margin-bottom: 15px;\n  display: flex;\n  flex-direction: column;\n  label {\n    display: block;\n    margin-bottom: 5px;\n  }\n\n  select {\n    width: 100%;\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    outline: none;\n  }\n`;\nexport const ResetButton = styled.button`\n  padding: 10px 20px;\n  height: 50px;\n  background-color: var(--main-green-color);\n  color: #fff;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: var(--main-transition);\n\n  &:hover {\n    background-color: var(--main-pink-color);\n  }\n`;\n","// Ð’ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ‚Ðµ Filters\nimport React from 'react';\nimport { Formik, Field } from 'formik';\nimport { nanoid } from 'nanoid';\nimport {\n  FormGroup,\n  SubmitButton,\n  FilterWrapper,\n  StyledForm,\n  ResetButton,\n} from './Filters.styled';\n\nconst flowerTypes = [\n  'Roses',\n  'Daisies',\n  'Tulips',\n  'Sunflowers',\n  'Daffodils',\n  'Lilies',\n  'Carnations',\n  'Chrysanthemums',\n  'Lavender',\n  'Irises',\n  'Peonies',\n  'Violets',\n  'Hyacinths',\n  'Hydrangeas',\n  'Cornflowers',\n  'Delphiniums',\n];\n\nexport const Filters = ({ onFilter, filters }) => {\n  const handleSubmit = values => {\n    onFilter(values);\n  };\n\n  return (\n    <FilterWrapper>\n      <Formik initialValues={filters} onSubmit={handleSubmit}>\n        {({ values, setFieldValue, resetForm }) => (\n          <StyledForm>\n            <FormGroup>\n              <label htmlFor=\"flowerType\">Select Flower Type:</label>\n              <Field\n                as=\"select\"\n                name=\"flowerType\"\n                onChange={e => setFieldValue('flowerType', e.target.value)}\n              >\n                <option value=\"\">All</option>\n                {flowerTypes.map(type => (\n                  <option key={nanoid()} value={type}>\n                    {type}\n                  </option>\n                ))}\n              </Field>\n            </FormGroup>\n            <FormGroup>\n              <label htmlFor=\"sortByPrice\">Sort by Price:</label>\n              <Field\n                as=\"select\"\n                name=\"sortByPrice\"\n                onChange={e => setFieldValue('sortByPrice', e.target.value)}\n              >\n                <option value=\"\"></option>\n                <option value=\"asc\">Ascending</option>\n                <option value=\"desc\">Descending</option>\n              </Field>\n            </FormGroup>\n            <FormGroup>\n              <label htmlFor=\"bouquetType\">Select Bouquet Type:</label>\n              <Field\n                as=\"select\"\n                name=\"bouquetType\"\n                onChange={e => setFieldValue('bouquetType', e.target.value)}\n              >\n                <option value=\"\">All</option>\n                <option value=\"everyday\">Everyday</option>\n                <option value=\"wedding\">Wedding</option>\n                <option value=\"spring\">Spring</option>\n              </Field>\n            </FormGroup>\n            <SubmitButton type=\"submit\">Apply Filters</SubmitButton>\n            <ResetButton type=\"submit\" onClick={resetForm}>\n              Reset Filters\n            </ResetButton>\n          </StyledForm>\n        )}\n      </Formik>\n    </FilterWrapper>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { BouquetItem } from 'components/BouquetItem/BouquetItem';\nimport { CatalogWrapper, LoadingText } from './Catalog.styled';\nimport { nanoid } from 'nanoid';\nimport { fetchBouquets } from 'redux/bouquets/operations';\nimport { selectAllBouquets, selectIsLoading } from 'redux/bouquets/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Filters } from 'components/Filters/Filters';\nimport { Loader } from 'components/Loader/Loader';\n\nexport const Catalog = () => {\n  const dispatch = useDispatch();\n  const bouquets = useSelector(selectAllBouquets);\n  const isLoading = useSelector(selectIsLoading);\n  const [filters, setFilters] = useState({\n    flowerType: '',\n    sortByPrice: '',\n    bouquetType: '',\n  });\n\n  useEffect(() => {\n    dispatch(fetchBouquets());\n  }, [dispatch]);\n\n  const applyFilters = ({ flowerType, sortByPrice, bouquetType }) => {\n    setFilters({ flowerType, sortByPrice, bouquetType });\n  };\n\n  const handleReset = () => {\n    setFilters({\n      flowerType: '',\n      sortByPrice: '',\n      bouquetType: '',\n    });\n  };\n\n  const filteredBouquets = bouquets\n    .filter(bouquet => {\n      if (\n        filters.flowerType &&\n        !bouquet.composition.includes(filters.flowerType)\n      ) {\n        return false;\n      }\n      if (filters.bouquetType && bouquet.type !== filters.bouquetType) {\n        return false;\n      }\n      return true;\n    })\n    .sort((a, b) => {\n      if (filters.sortByPrice === 'asc') {\n        return a.price - b.price;\n      } else if (filters.sortByPrice === 'desc') {\n        return b.price - a.price;\n      } else {\n        return 0;\n      }\n    });\n\n  return (\n    <section>\n      <Filters\n        onFilter={applyFilters}\n        filters={filters}\n        onReset={handleReset}\n      />\n      {isLoading ? (\n        <LoadingText>\n          Please wait. Collection of bouquets is loading...{' '}\n          <Loader width={80} height={80} />\n        </LoadingText>\n      ) : (\n        <CatalogWrapper>\n          {filteredBouquets.map(bouquet => (\n            <BouquetItem key={nanoid()} bouquet={bouquet} />\n          ))}\n        </CatalogWrapper>\n      )}\n    </section>\n  );\n};\n","import { Catalog } from 'components/Catalog/Catalog';\n\nexport default function CatalogPage() {\n  return <Catalog />;\n}\n","export const selectAllBouquets = state => state.bouquets.bouquets;\nexport const selectIsLoading = state => state.bouquets.isLoading;\n","export const selectCartProducts = state => state.cartProducts.products;\n"],"names":["BouquetWrapper","styled","ImgWrapper","StyledImg","StyledTitle","DescrWrapper","StyledPrice","StyledDescription","Button","notiflixSuccessOptions","fontSize","success","background","textColor","BouquetItem","bouquet","url","price","description","name","dispatch","useDispatch","cartProducts","useSelector","selectCartProducts","src","alt","onClick","existingProduct","find","item","_id","console","log","increaseQuantity","quantity","Notiflix","addToCart","handleAddToCart","CatalogWrapper","LoadingText","urlAlphabet","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","FilterWrapper","StyledForm","Form","SubmitButton","FormGroup","ResetButton","flowerTypes","Filters","onFilter","filters","initialValues","onSubmit","values","setFieldValue","resetForm","htmlFor","as","onChange","e","target","value","map","type","Catalog","bouquets","selectAllBouquets","isLoading","selectIsLoading","useState","flowerType","sortByPrice","bouquetType","setFilters","useEffect","fetchBouquets","filteredBouquets","filter","composition","includes","sort","a","b","onReset","Loader","width","height","CatalogPage","state","products"],"sourceRoot":""}